{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour plus de commodité, nous pouvons augmenter la largeur d’affichage de l’ordinateur portable pour mieux utiliser le format grand écran"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:90% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:90% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensuite, nous importerons toutes les bibliothèques dont nous avons besoin."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importation des bibliotheques"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # manipuler des matrices ou tableaux multidimensionnels ainsi que des fonctions mathématiques\n",
    "import tensorflow as tf \n",
    "from tensorflow import keras # une bibliotheque pour construire notre module\n",
    "from pathlib import Path # fournit diverses classes représentant les chemins du système de fichiers \n",
    "from scipy.io import wavfile # pour charger les fichiers de types .wav\n",
    "import python_speech_features # pour Extraire les caractéristiques vocales, y compris le coefficient cepstral de fréquence Mel (MFCC) à partir d'un fichier audio\n",
    "from tqdm.notebook import tqdm # pour visualiser le progresse des traitement\n",
    "from sklearn.model_selection import train_test_split # diviser le jeu de donnee en data train et test data\n",
    "from sklearn.metrics import confusion_matrix # pour afficher la matrice de confusion\n",
    "from livelossplot import PlotLossesKeras # pour afficher le summary de module\n",
    "import sounddevice as sd # pour manipuler les audios\n",
    "%matplotlib inline  \n",
    "import matplotlib.pyplot as plt # pour la visualisation des graphes\n",
    "from datetime import datetime # pour afficher la date\n",
    "from timeit import default_timer as timer #pour mesurer le temps au moment de record\n",
    "from IPython.display import clear_output # pour amilliorer l affichage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "la base de données de commandes Google Speech que nous utiliserons contient 30 mots différents, 15 mots de base et 15 mots auxiliaires. Dans ce projet, nous n’utiliserons que les 15 mots de base.\n",
    "\n",
    "\n",
    "Nous pouvons définir nous-mêmes un dictionnaire qui mappe chaque mot différent à un nombre et une liste qui fait le mappage inverse. Ceci est nécessaire car nous avons besoin d’étiquettes de classe numériques pour notre réseau neuronal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dictionnaire des mots a detecter\n",
    "word2index = {\n",
    "    \"yes\": 0,\n",
    "    \"down\": 1,\n",
    "    \"left\": 2,\n",
    "    \"on\": 3,\n",
    "    \"off\": 4,\n",
    "    \"stop\": 5,\n",
    "    \"zero\": 6,\n",
    "    \"one\": 7,\n",
    "    \"three\": 8,\n",
    "    \"four\": 9,\n",
    "    \"five\": 10,\n",
    "    \"six\": 11,\n",
    "    \"seven\": 12,\n",
    "    \"eight\": 13,\n",
    "    \"nine\": 14,\n",
    "}\n",
    "\n",
    "index2word = [word for word in word2index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensuite, nous allons parcourir la base  de données et enregistrer tous les chemins d’accès aux échantillons de données dans une liste.\n",
    "\n",
    "Le jeu de données ne contient pas un nombre égal d’échantillons pour chaque mot, mais il contient >2000 échantillons valides pour chacun des 20 mots principaux.\n",
    "Chaque échantillon est censé avoir exactement 1s de long, ce qui, à une fréquence d’échantillonnage de 16 kHz et une quantification de 16 bits, devrait entraîner des fichiers volumineux de 32044 octets.\n",
    "D’une manière ou d’une autre, certains échantillons dans le jeu de données ne sont pas exactement de cette taille, nous les ignorons.\n",
    "\n",
    "De plus, nous utiliserons une belle barre de progression [tqdm] (https://tqdm.github.io/) pour la rendre plus sophistiquée. Au final, nous aurions dû rassembler un total de 40000 échantillons."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading dataset...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b530c1fee4124d179f5b8ec5048ef134",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/30000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/2592664003.py:21: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  classes = np.array(classes, dtype=np.int)\n"
     ]
    }
   ],
   "source": [
    "num_classes = len(word2index)\n",
    "num_samples_per_class = 2000\n",
    "speech_commands_dataset_basepath = Path(r\"C:\\Users\\Ismail lghzal\\Desktop\\speech_command_dataset\")\n",
    "\n",
    "print(\"loading dataset...\")\n",
    "samples = []\n",
    "classes =  []\n",
    "with tqdm(total=num_samples_per_class*15) as pbar:\n",
    "    for word_class in word2index:\n",
    "        folder = speech_commands_dataset_basepath / word_class # sub-folder for each word\n",
    "        count = 0\n",
    "        for file in folder.iterdir(): # iterate over all files in the folder\n",
    "            # somehow, there are samples which aren't exactly 1 s long in the dataset. ignore those\n",
    "            if file.stat().st_size == 32044:\n",
    "                samples.append(file) # store path of sample file\n",
    "                classes.append(word2index[word_class]) # append word class index to list\n",
    "                count +=1\n",
    "                pbar.update()\n",
    "            if count >= num_samples_per_class:\n",
    "                break\n",
    "classes = np.array(classes, dtype=np.int)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Process Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculer les fonctionnalités MFCC à partir du signal audio\n",
    "def audio2feature(audio):\n",
    "    audio = audio.astype(np.float)\n",
    "    # normaliser les donnees\n",
    "    audio -= audio.mean()\n",
    "    audio /= np.max((audio.max(), -audio.min())) # diviser par la plus grand amplitude dans le signal audio\n",
    "    # compute MFCC coefficients\n",
    "    features = python_speech_features.mfcc(audio, samplerate=16000, winlen=0.025 , winstep=0.01, numcep=20, nfilt=40, nfft=512, lowfreq=100, highfreq=None, preemph=0.97, ceplifter=22, appendEnergy=True, winfunc=np.hamming)\n",
    "    return features\n",
    "\n",
    "# charger le fichier .wav, ajouter du bruit et calculer les fonctionnalités MFCC\n",
    "def wav2feature(filepath):\n",
    "    samplerate, data = wavfile.read(filepath)\n",
    "    data = data.astype(np.float)\n",
    "    # normalize data\n",
    "    data -= data.mean()\n",
    "    data /= np.max((data.max(), -data.min()))\n",
    "    # add gaussian noise\n",
    "    data += np.random.normal(loc=0.0, scale=0.025, size=data.shape)\n",
    "    # compute MFCC coefficients\n",
    "    features = python_speech_features.mfcc(data, samplerate=16000, winlen=0.025, winstep=0.01, numcep=20, nfilt=40, nfft=512, lowfreq=100, highfreq=None, preemph=0.97, ceplifter=22, appendEnergy=True, winfunc=np.hamming)\n",
    "    return features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si nous calculons les fonctionnalités d’un échantillon audio, nous voyons que la forme de la fonction est (99, 20). Le premier index est celui de l’extrait de 10 ms de long du signal audio de 1s de long, nous avons donc 1s / 10ms-1 = 99 extraits. La deuxième dimension est le nombre de coefficients MFC, dans ce cas nous en avons 20.\n",
    "\n",
    "Nous pouvons maintenant charger tous les échantillons audio et précalculer les fonctionnalités MFCC pour chaque échantillon. Notez que cela prendra beaucoup de temps!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "features.shape (30000, 99, 20)\n",
      "pre-computing features from audio files...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/607495573.py:14: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  data = data.astype(np.float)\n",
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/2723793887.py:3: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  features = np.empty((num_classes*num_samples_per_class, )+(feature_shape), dtype=np.float)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "570f29079bf74caea428322cbc96f8b1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/30000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# charger tous les échantillons audio et précalculer les fonctionnalités MFCC pour chaque échantillon\n",
    "feature_shape = wav2feature(samples[0]).shape\n",
    "features = np.empty((num_classes*num_samples_per_class, )+(feature_shape), dtype=np.float)\n",
    "print(\"features.shape\", features.shape)\n",
    "\n",
    "print(\"pre-computing features from audio files...\")\n",
    "with tqdm(total=num_samples_per_class*num_classes) as pbar:\n",
    "    for k, sample in enumerate(samples):\n",
    "        features[k] = wav2feature(sample)\n",
    "        pbar.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous pouvons maintenant enregistrer le jeu de données de formation précalculé contenant les fonctionnalités des exemples de formation et leurs étiquettes de classe.  \n",
    "De cette façon, nous n’aurons pas à recalculer les fonctionnalités la prochaine fois."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/1572311302.py:3: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  np.save(\"classes\", np.array(classes, dtype=np.int))\n"
     ]
    }
   ],
   "source": [
    "# enregistrer les fonctionnalités et les classes calculées sur le disque dur\n",
    "np.save(\"mfcc_plus_energy_features_30000x99x15\", features)\n",
    "np.save(\"classes\", np.array(classes, dtype=np.int))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous pouvons charger les entités précalculées et les étiquettes de classe comme suit :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# charger les ensembles de données des fonctionnalités d'entraînement pré-calculées et les étiquettes de classe d'entraînement\n",
    "features = np.load(\"mfcc_plus_energy_features_30000x99x15.npy\")\n",
    "classes = np.load(\"classes.npy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data, validation_data, train_classes, validation_classes = train_test_split(features, classes,\n",
    "                                                                      test_size=0.30, random_state=42, shuffle=True) # la devision de jeu de donnee en deux partie : partie de test et l autre d entrainement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Définir l'architecture du modèle "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 92, 64)            10304     \n",
      "                                                                 \n",
      " max_pooling1d (MaxPooling1D  (None, 30, 64)           0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 23, 128)           65664     \n",
      "                                                                 \n",
      " max_pooling1d_1 (MaxPooling  (None, 7, 128)           0         \n",
      " 1D)                                                             \n",
      "                                                                 \n",
      " conv1d_2 (Conv1D)           (None, 3, 256)            164096    \n",
      "                                                                 \n",
      " global_max_pooling1d (Globa  (None, 256)              0         \n",
      " lMaxPooling1D)                                                  \n",
      "                                                                 \n",
      " dense (Dense)               (None, 128)               32896     \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 64)                8256      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 15)                975       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 282,191\n",
      "Trainable params: 282,191\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "keras.backend.clear_session()\n",
    "\n",
    "### Definition de modele CNN ###\n",
    "model = keras.models.Sequential()\n",
    "\n",
    "model.add(keras.layers.Input(shape=(99, 20)))\n",
    "\n",
    "model.add(keras.layers.Conv1D(64, kernel_size=8, activation=\"relu\"))\n",
    "model.add(keras.layers.MaxPooling1D(pool_size=3))\n",
    "\n",
    "model.add(keras.layers.Conv1D(128, kernel_size=8, activation=\"relu\"))\n",
    "model.add(keras.layers.MaxPooling1D(pool_size=3))\n",
    "\n",
    "model.add(keras.layers.Conv1D(256, kernel_size=5, activation=\"relu\"))\n",
    "model.add(keras.layers.GlobalMaxPooling1D())\n",
    "\n",
    "model.add(keras.layers.Dense(128, activation=\"relu\"))\n",
    "\n",
    "model.add(keras.layers.Dense(64, activation=\"relu\"))\n",
    "\n",
    "model.add(keras.layers.Dense(num_classes, activation='softmax'))\n",
    "\n",
    "# architecture du modèle d'impression\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant que notre modèle CNN est défini, nous pouvons le configurer pour la formation. Par conséquent, nous choisissons un algorithme d’optimisation, par exemple Stochastic Gradient Descent (SGD) ou ADAM. De plus, nous devons spécifier une fonction de perte pour l’entraînement. La fonction de perte détermine la manière dont les performances du réseau sont évaluées. Dans ce cas, nous avons un problème de classification multi-classes, où les étiquettes de classe sont représentées sous forme de valeurs entières. Dans ce cas, la perte d’entropie croisée catégorielle clairsemée peut être utilisée. Si nos étiquettes de classe étaient codées à l’aide d’un schéma de codage à un chaud, nous utiliserions la variante normale (non clairsemée). En tant que métrique, nous spécifions la précision de sorte qu’après chaque époque, la précision du réseau soit calculée."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compiler le modele"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# un algorithme d’optimisation,\n",
    "sgd = keras.optimizers.SGD()\n",
    "loss_fn = keras.losses.SparseCategoricalCrossentropy() # use Sparse because classes are represented as integers not as one-hot encoding\n",
    "\n",
    "model.compile(optimizer=sgd, loss=loss_fn, metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ajuster le modèle aux données d'entraînement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy\n",
      "\ttraining         \t (min:    0.658, max:    0.991, cur:    0.991)\n",
      "\tvalidation       \t (min:    0.753, max:    0.925, cur:    0.923)\n",
      "Loss\n",
      "\ttraining         \t (min:    0.033, max:    1.105, cur:    0.033)\n",
      "\tvalidation       \t (min:    0.288, max:    0.999, cur:    0.385)\n",
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r",
      "657/657 [==============================] - 8s 13ms/step - loss: 0.0328 - accuracy: 0.9914 - val_loss: 0.3849 - val_accuracy: 0.9227\n"
     ]
    }
   ],
   "source": [
    "arly_stopping = tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=5, restore_best_weights=True)\n",
    "plt.close()\n",
    "\n",
    "history = model.fit(train_data, \n",
    "                    train_classes, \n",
    "                    batch_size=32, \n",
    "                    epochs=100, \n",
    "                    validation_data=(validation_data, validation_classes),\n",
    "                    callbacks=[PlotLossesKeras(), early_stopping])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comme nous pouvons le voir, pendant l’entraînement, les pertes diminuent et la précision augmente.\n",
    "Après la formation, nous pouvons enregistrer notre modèle pour une utilisation ultérieure si nous le souhaitons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# enregistrer le modèle\n",
    "model.save(datetime.now().strftime(\"%d_%m_%Y__%H_%M\")+\".h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# charger le modele\n",
    "model = keras.models.load_model(\"12_02_2022__15_13.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot confusion matrix\n",
    "y = np.argmax(model.predict(validation_data), axis=1)\n",
    "cm = confusion_matrix(validation_classes, y,  normalize=\"all\")\n",
    "%matplotlib inline\n",
    "plt.close()\n",
    "plt.figure(figsize = (8,8))\n",
    "plt.imshow(cm, cmap=plt.cm.Blues)\n",
    "plt.xlabel(\"Predicted labels\")\n",
    "plt.ylabel(\"True labels\")\n",
    "plt.xticks(np.arange(0, 15, 1), index2word, rotation=90)\n",
    "plt.yticks(np.arange(0, 15, 1), index2word)\n",
    "plt.tick_params(labelsize=12)\n",
    "plt.title('Confusion matrix ')\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# une fonction pour detecter la parole dans un audio la zone de 1s qui un la plus grand amplitude\n",
    "def detectvoice(audio,sr,duration):\n",
    "  audio=np.array(audio)\n",
    "  s={0:0}\n",
    "  d_size=int(duration*sr)\n",
    "  for i in range(int(len(audio)/10)):\n",
    "    audio[i]=0\n",
    "    audio[len(audio)-i-1]\n",
    "  if d_size > len(audio):\n",
    "    print(\"your duratiion is incorrect\")\n",
    "  else:\n",
    "    for i in range(len(audio)-d_size):\n",
    "      s[i]=np.sum(audio[i:i+d_size]**2)\n",
    "\n",
    "    key_list = list(s.keys())\n",
    "    val_list = list(s.values())\n",
    "    max_s=max(val_list)\n",
    "    # print key with val 100\n",
    "    position = val_list.index(max_s)\n",
    "    index_a=(key_list[position],key_list[position]+d_size)\n",
    "    my_audio=audio[index_a[0]:index_a[1]]\n",
    "    my_audio= my_audio.astype(np.float)\n",
    "    my_audio=np.array(my_audio)\n",
    "    return my_audio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Évaluer le modèle sur les données de test et prédire les valeurs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/3623761462.py:5: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  recording = sd.rec(int(3*sd.default.samplerate), channels=1, samplerate=sd.default.samplerate, dtype=np.float, blocking=True)\n",
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/3596357517.py:22: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  my_audio= my_audio.astype(np.float)\n",
      "C:\\Users\\ISMAIL~1\\AppData\\Local\\Temp/ipykernel_7424/607495573.py:3: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  audio = audio.astype(np.float)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "candidates:\n",
      "-----------------------------\n",
      "1.)\tyes\t:\t99.9%\n",
      "2.)\tdown\t:\t0.1%\n",
      "3.)\tzero\t:\t0.0%\n",
      "-----------------------------\n",
      "feature computation time: 2.3 ms\n",
      "CNN model prediction time: 44.4 ms\n",
      "total time: 46.7 ms\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sd.default.samplerate = 16000\n",
    "sd.default.channels = 1, 2 # mono record, stereo playback\n",
    "\n",
    "# commencer a enregistrer audio de longueur de 3s\n",
    "recording = sd.rec(int(3*sd.default.samplerate), channels=1, samplerate=sd.default.samplerate, dtype=np.float, blocking=True)\n",
    "recording =detectvoice(recording,16000,1) # couper 1s de audio qui ya une grande amplitude\n",
    "t1 = timer()\n",
    "recorded_feature = audio2feature(recording) # extraire les mfccs de audio\n",
    "t2 = timer()\n",
    "recorded_feature = np.expand_dims(recorded_feature, 0)\n",
    "prediction = model.predict(recorded_feature).reshape((15, ))\n",
    "t3 = timer()\n",
    "# normaliser la sortie de prédiction pour obtenir des \"probabilités\"\n",
    "prediction /= prediction.sum()\n",
    "# print the 3 candidates with highest probability\n",
    "prediction_sorted_indices = prediction.argsort()\n",
    "print(\"candidates:\\n-----------------------------\")\n",
    "for k in range(3):\n",
    "    i = int(prediction_sorted_indices[-1-k])\n",
    "    print(\"%d.)\\t%s\\t:\\t%2.1f%%\" % (k+1, index2word[i], prediction[i]*100))\n",
    "print(\"-----------------------------\")\n",
    "print(\"feature computation time: %2.1f ms\" % ((t2-t1)*1e3))\n",
    "print(\"CNN model prediction time: %2.1f ms\" % ((t3-t2)*1e3))\n",
    "print(\"total time: %2.1f ms\" % ((t3-t1)*1e3))\n",
    "\n",
    "plt.close()\n",
    "plt.figure(1, figsize=(10, 7))\n",
    "plt.subplot(211)\n",
    "plt.plot(recording)\n",
    "plt.subplot(212)\n",
    "plt.imshow(recorded_feature.reshape(99, 20).T, aspect=\"auto\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
